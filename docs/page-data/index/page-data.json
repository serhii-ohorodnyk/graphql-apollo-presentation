{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","result":{"data":{"deck":{"id":"3d65db4a-5755-5d5a-b98d-3eefbafdc799","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = vsDark;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"State management\"), mdx(\"h2\", null, \"with Apollo & GraphQL\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"blah blah\"), mdx(\"hr\", null), mdx(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      alignItems: 'center',\n      justifyContent: 'center'\n    }\n  }, mdx(\"img\", {\n    style: {\n      objectFit: 'contain',\n      width: '30%'\n    },\n    src: react_redux\n  }), mdx(\"span\", {\n    style: {\n      fontSize: '20rem',\n      fontWeight: 'bold',\n      margin: '0 50px'\n    }\n  }, \"\\u2192\"), mdx(\"img\", {\n    style: {\n      objectFit: 'contain',\n      width: '30%'\n    },\n    src: react_apollo\n  })), mdx(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      alignItems: 'center',\n      justifyContent: 'space-around',\n      width: \"100%\"\n    }\n  }, mdx(\"div\", null, \"React + Redux\"), mdx(\"div\", null, \"Apollo + React\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Motivation\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"h3\", null, \"Redux is great but...\"), mdx(\"h3\", null, mdx(\"div\", null, \"most of the applications need a caching layer\"), mdx(\"div\", null, \"and \", mdx(\"span\", {\n    style: {\n      textDecoration: 'underline'\n    }\n  }, \"not\"), \" a global state management\"))), mdx(\"hr\", null), mdx(\"h1\", null), mdx(Multiline, {\n    Elem: \"h3\",\n    margin: 50,\n    lines: ['ðŸ¤”', 'But redux can work like caching layer!', 'Using async actions'],\n    mdxType: \"Multiline\"\n  }), mdx(\"hr\", null), mdx(\"h3\", null, \"To understand the problem lets take a look at an example\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"Maker list page component\\\"\",\n    \"subtitle\": \"\\\"Maker\",\n    \"list\": true,\n    \"page\": true,\n    \"component\\\"\": true\n  }), \"const mapStateToProps = ({ makerState: makers }: AppState): MakerListPageStateProps => ({\\n  isLoaded: makers.isLoaded,\\n  isLoading: makers.isLoading,\\n  error: makers.error,\\n  makers: makers.data,\\n});\\n\\nconst mapDispatchToProps = (dispatch: Dispatch): MakerListPageDispatchProps => ({\\n  loadMakers: (params: LoadMakersRequestParams) =>\\n    dispatch(GetMakerListAction.create(AsyncActionStatus.Requested, params)),\\n});\\n\\nconst MakerListPageComponent = (props: MakerListPageProps & RouteComponentProps) => {\\n  const { isValidToken } = useAuthentication();\\n  const countryCode = useSelector(getCurrentCountryCode);\\n  // Load all makers\\n  React.useEffect(() => {\\n    if (isValidToken) {\\n      // if user is logged-in, makers will be loaded automatically\\n      // using RetailerContext\\n      return;\\n    }\\n\\n    if (!props.isLoading && !props.isLoaded && !!countryCode) {\\n      return props.loadMakers({\\n        countryCode,\\n        skip: 0,\\n        limit: Number.MAX_SAFE_INTEGER,\\n      });\\n    }\\n  }, [props.location, props.isLoading, props.isLoaded, countryCode]);\\n\\n  return (\\n      <MakerListPage\\n        {...props}\\n        makers={getMakersToDisplay()}\\n      />\\n  );\\n};\\n\\nexport default connect(\\n  mapStateToProps,\\n  mapDispatchToProps\\n)(MakerListPageComponent);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2[12:27],3[12:29],4[10:27],5[11:22],9,10 subtitle=\\\"Conencting to redux store\\\"\",\n    \"2[12:27],3[12:29],4[10:27],5[11:22],9,10\": true,\n    \"subtitle\": \"\\\"Conencting\",\n    \"to\": true,\n    \"redux\": true,\n    \"store\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"17:31 subtitle=\\\"Refetch data based on dependencies\\\"\",\n    \"17:31\": true,\n    \"subtitle\": \"\\\"Refetch\",\n    \"data\": true,\n    \"based\": true,\n    \"on\": true,\n    \"dependencies\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"24[29:43] subtitle=\\\"Use cached data if it is loaded already\\\"\",\n    \"24[29:43]\": true,\n    \"subtitle\": \"\\\"Use\",\n    \"cached\": true,\n    \"data\": true,\n    \"if\": true,\n    \"it\": true,\n    \"is\": true,\n    \"loaded\": true,\n    \"already\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"31\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"31 subtitle=\\\"Retrigger funciton if dependencies change\\\"\",\n    \"subtitle\": \"\\\"Retrigger\",\n    \"funciton\": true,\n    \"if\": true,\n    \"dependencies\": true,\n    \"change\\\"\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Seems simple. Right?\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"h2\", null, \"Except it's not all...\")), mdx(\"hr\", null), mdx(Center, {\n    mdxType: \"Center\"\n  }, mdx(\"h2\", null, \"What if dependency value changes outside of MakerListPage?\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"h3\", null, \"- We refetch list data after dependency changes (we have thunk)\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"TBD: Diagramm with dependencies\"), mdx(\"hr\", null), mdx(Center, {\n    mdxType: \"Center\"\n  }, mdx(\"h3\", null, \"Code becames difficult to reason about\"), mdx(\"ul\", null, mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"li\", null, \"actions (or context) starts to fetch data that they don't know about\"), mdx(\"li\", null, \"it becomes easy to overfetch data or get stale data\"), mdx(\"li\", null, \"difficult to refactor and decouple code\")))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"That is why we actually reload complete page when we logout instead of cleaning the state\"), mdx(\"hr\", null), mdx(Center, {\n    mdxType: \"Center\"\n  }, mdx(\"h3\", null, \"It happens because we are not fetching data in a reactive way (declarative)\")), mdx(\"hr\", null), mdx(Center, {\n    mdxType: \"Center\"\n  }, mdx(\"h3\", null, \"It can be declarative with redux\"), mdx(\"ul\", null, mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"li\", null, \"Save data in redux store with request parameters as a key\"), mdx(\"li\", null, \"Use smart selectors (hooks) to get data from store based on request parameters or trigger the request action\"), mdx(\"li\", null, \"Normalize the data (dictionary of items separate, array of item Ids separate)\")))), mdx(\"hr\", null), mdx(\"h2\", null, \"With apollo we get this caching for free\"), mdx(\"h3\", null, \"It is a graphql client with smart cache\"), mdx(\"h3\", null, \"not a storage\"), mdx(\"hr\", null), mdx(\"img\", {\n    src: apollo_vs_redux,\n    style: {\n      height: '100%'\n    }\n  }), mdx(\"hr\", null), mdx(\"h2\", null, \"Graphql core definitions\"), mdx(Center, {\n    mdxType: \"Center\"\n  }, mdx(\"ul\", null, mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"li\", null, \"GraphQL - a query language for your API\"), mdx(\"li\", null, \"Schema - description of available objects and its fields\"), mdx(\"li\", null, \"Resolver - function that describes how to resolve field of an object in a Schema\"), mdx(\"li\", null, \"Operation(query or mutation) - request of specific fields on objects\")))), mdx(\"hr\", null), mdx(\"h2\", null, \"TBD: Example with graphql\"), mdx(\"hr\", null), mdx(\"h2\", null, \"References\"), mdx(References, {\n    mdxType: \"References\"\n  }), mdx(\"hr\", null));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","isCreatedByStatefulCreatePages":false,"id":"3d65db4a-5755-5d5a-b98d-3eefbafdc799","slug":"","title":"State management"}}}